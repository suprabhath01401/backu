{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "JS",
      "decoder" : null,
      "tbelDecoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : "var ascii = msg.params;\r\n// If msg.params is already a string with quotes, remove them:\r\nif (typeof ascii === 'string' && ascii.startsWith('\"') && ascii.endsWith('\"')) {\r\n    ascii = ascii.substring(1, ascii.length - 1);\r\n}\r\nvar result = {\r\n  contentType: \"TEXT\",   // Very important: ensures it's sent as raw text, not JSON\r\n  data: ascii,           // Just the plain string\r\n  metadata: {\r\n    topic: \"write\"       // MQTT topic to publish to\r\n  }\r\n};\r\n\r\nreturn result;",
      "tbelEncoder" : "var ascii = msg.params;\r\n// If msg.params is already a string with quotes, remove them:\r\nif (typeof ascii === 'string' && ascii.startsWith('\"') && ascii.endsWith('\"')) {\r\n    ascii = ascii.substring(1, ascii.length - 1);\r\n}\r\nvar result = {\r\n  contentType: \"TEXT\",   // Very important: ensures it's sent as raw text, not JSON\r\n  data: ascii,           // Just the plain string\r\n  metadata: {\r\n    topic: \"write\"       // MQTT topic to publish to\r\n  }\r\n};\r\n\r\nreturn result;",
      "updateOnlyKeys" : [ "manufacturer" ]
    },
    "converterVersion" : 1,
    "debugMode" : false,
    "debugSettings" : {
      "allEnabled" : false,
      "allEnabledUntil" : 0,
      "failuresEnabled" : true
    },
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "b4fedb40-6dfd-11f0-829a-67f6222f946a"
    },
    "integrationType" : "MQTT",
    "name" : "Downlink_teltonika",
    "type" : "DOWNLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  },
  "calculatedFields" : [ ]
}