{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "JS",
      "decoder" : "// 1. Helper functions\r\nfunction decodeToString(payload) {\r\n  return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n  return JSON.parse(decodeToString(payload));\r\n}\r\n\r\n// 2. Parse inbound JSON\r\nvar data = decodeToJson(payload);\r\nvar entry = data.FM_Testing_Insertion_Type[0];\r\nvar value = parseFloat(entry.data);\r\n\r\n// 3. Determine telemetry label\r\nvar telemetry = {};\r\nif (value < 10000) {\r\n  telemetry.Instant_Flow = value;\r\n} else {\r\n  telemetry.Totaliser = value;\r\n}\r\n\r\n// 4. Return result\r\nreturn {\r\n  deviceName: 'device_' + entry.server_id,\r\n  deviceType: entry.server_name,\r\n  telemetry: telemetry\r\n};",
      "tbelDecoder" : "var parameter_mapping_test10 = [\r\n  \"Voltage V1N\",\"Voltage V2N\",\"Voltage V3N\",\"Average Voltage LN\",\r\n  \"Voltage V12\",\"Voltage V23\",\"Voltage V31\",\"Average Voltage LL\",\r\n  \"Current I1\",\"Current I2\",\"Current I3\",\"Average Current\",\r\n  \"kW1\",\"kW2\",\"kW3\",\"kVAr1\",\"kVAr2\",\"kVAr3\",\"kVA1\",\"kVA2\",\"kVA3\",\r\n  \"PF 1\",\"PF 2\",\"PF 3\",\"Average PF\",\"Frequency\",\"Total KW\",\"Total KVAR\",\"Total KVA\",\r\n  \"Active Power Max Demand\",\"Active Power Min Demand\",\r\n  \"Reactive Power Max Demand\",\"Reactive Power Min Demand\",\"Apparent Power Max Demand\",\r\n  \"Maximum voltage V1N\",\"Maximum voltage V2N\",\"Maximum voltage V3N\",\r\n  \"Maximum voltage V12\",\"Maximum voltage V23\",\"Maximum voltage V31\",\r\n  \"Maximum current I1\",\"Maximum current I2\",\"Maximum current I3\",\r\n  \"Import Active energy\",\"Export Active energy\",\"Total Active energy\",\r\n  \"Import Reactive energy\",\"Export Reactive energy\",\"Total Reactive energy\",\r\n  \"Total Apparent energy\",\"Run Hour\",\"Auxillary Interrupts\",\"Total Harmonic Distortion(THD)\",\r\n  \"THD of Voltage V1N\",\"THD of Voltage V2N\",\"THD of Voltage V3N\",\r\n  \"THD of Voltage V12\",\"THD of Voltage V23\",\"THD of Voltage V31\",\r\n  \"THD of Current I1\",\"THD of Current I2\",\"THD of Current I3\"\r\n];\r\n\r\n// 2. Helper functions\r\nfunction decodeToString(payload) {\r\n  return String.fromCharCode.apply(String, payload);\r\n}\r\nfunction decodeToJson(payload) {\r\n  return JSON.parse(decodeToString(payload));\r\n}\r\n\r\n// 3. Parse inbound JSON\r\nvar data = decodeToJson(payload);\r\nvar parts = data.input1[0].data.split(',');\r\nvar raw = [];\r\nfor (var i = 0; i < parts.length; i++) {\r\n  raw.push(parseFloat(parts[i]));\r\n}\r\n\r\n// 4. Build telemetry\r\nvar telemetry = {};\r\nfor (var i = 0; i < parameter_mapping_test10.length && i < raw.length; i++) {\r\n  telemetry[parameter_mapping_test10[i]] = raw[i];\r\n}\r\n\r\n// 5. Return result\r\nreturn {\r\n  deviceName: 'device_' + data.input4,\r\n  deviceType: data.input1[0].server_name,\r\n  telemetry: telemetry\r\n};",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : [ "manufacturer" ]
    },
    "converterVersion" : 1,
    "debugMode" : false,
    "debugSettings" : {
      "allEnabled" : false,
      "allEnabledUntil" : 1753960412945,
      "failuresEnabled" : true
    },
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "4cb32e10-6dfd-11f0-829a-67f6222f946a"
    },
    "integrationType" : "MQTT",
    "name" : "Uplink data converter for MQTT_Teltonika",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  },
  "calculatedFields" : [ ]
}